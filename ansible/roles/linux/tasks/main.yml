# - name: add apt repository - hashicorp
#   become: true
#   block:
#     - name: download hashicorp gpg key
#       ansible.builtin.get_url:
#         url: https://apt.releases.hashicorp.com/gpg
#         dest: /usr/share/keyrings/hashicorp-archive-keyring.gpg
#     - name: add hashicorp apt source
#       ansible.builtin.apt_repository:
#         repo: "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com {{ ansible_distribution_release }} main"
#         state: present
#   tags:
#     - linux

- name: Install apt üêß packages
  become: true
  ansible.builtin.apt:
    update_cache: yes
    name: "{{ item }}"
    state: present
  loop: "{{ apt_packages }}"
  ignore_errors: true
  tags:
    - linux
    - apt

- name: Add the flathub üêß repository remote to the user installation
  community.general.flatpak_remote:
    name: flathub
    state: present
    flatpakrepo_url: https://dl.flathub.org/repo/flathub.flatpakrepo
    method: user
  tags:
    - linux
    - flatpak

- name: Install flatpak üêß packages
  ignore_errors: true
  community.general.flatpak:
    name: "{{ item }}"
    state: present
    method: user
  loop: "{{ flatpak_packages }}"
  tags:
    - linux
    - flatpak

# - name: Flatpak customization
# ansible.builtin.command: flatpak override --user --filesystem=/run/docker.sock com.visualstudio.code

- name: "Create custom symlinks üîó for bat and fd"
  ignore_errors: true
  ansible.builtin.file:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    state: link
  loop:
    - { src: /usr/bin/batcat, dest: ~/.local/bin/bat }
    - { src: /usr/bin/fdfind, dest: ~/.local/bin/fd }
  tags:
    - linux

- name: "Enable firewall üî•"
  ansible.builtin.shell: sudo ufw enable
  tags:
    - linux

- name: Setup gnome terminal settings
  ansible.builtin.shell:
    "gsettings set {{ item.key }} {{ item.value }}"
  loop:
    - { key: "org.gnome.Terminal.Legacy.Keybindings:/org/gnome/terminal/legacy/keybindings/", value: "next-tab '<Primary>Tab'" }
    - { key: "org.gnome.Terminal.Legacy.Keybindings:/org/gnome/terminal/legacy/keybindings/", value: "prev-tab '<Primary><Shift>Tab'" }
    - { key: "org.gnome.mutter dynamic-workspaces", value: "false" } # disable dynamic workspaces
    - { key: "org.gnome.desktop.wm.preferences", value: "num-workspaces 6" } # set static workspace value
  when: ansible_distribution | lower == 'pop!_os'
  tags:
    - linux

- name: popos unbind default keybindings for switching applications # https://github.com/pop-os/shell/issues/142
  ansible.builtin.shell:
    "gsettings set org.gnome.shell.keybindings switch-to-application-{{ item }} '[]'"
  loop: "{{ range(1, 7) }}"
  when: ansible_distribution | lower == 'pop!_os'
  tags:
    - linux

- name: popos - rebind keyboard shortcuts to switch between workspaces # https://github.com/pop-os/shell/issues/142
  ansible.builtin.shell:
    gsettings set org.gnome.desktop.wm.keybindings switch-to-workspace-{{ item }} "['<Super>{{ item }}']"
  loop: "{{ range(1, 7) }}"
  when: ansible_distribution | lower == 'pop!_os'
  tags:
    - linux

- name: popos - assign an active window to a workspace # https://github.com/pop-os/shell/issues/142
  ansible.builtin.shell:
    gsettings set org.gnome.desktop.wm.keybindings move-to-workspace-{{ item }} "['<Super><Shift>{{ item }}']"
  loop: "{{ range(1, 7) }}"
  when: ansible_distribution | lower == 'pop!_os'
  tags:
    - linux

- name: neovim setup
  block:
    - name: "download neovim version {{ neovim['version'] }}"
      ansible.builtin.get_url:
        url: "https://github.com/neovim/neovim/releases/download/v{{ neovim['version'] }}/nvim-linux64.tar.gz"
        dest: ~/.local/lib/
        checksum: "sha256: {{ neovim['sha256'] }}"

    - name: "create nvim symlink üîó"
      ignore_errors: true
      ansible.builtin.file:
        src: ~/.local/lib/nvim-linux64/bin/nvim
        dest: ~/.local/bin/nvim
        state: link
        follow: no
        force: true

    - name: extract nvim install
      ansible.builtin.unarchive:
        src: ~/.local/lib/nvim-linux64.tar.gz
        dest: ~/.local/lib/
  tags:
    - linux
    - neovim

# After installing your font, you will have to refresh your font cache by doing fc-cache -f -v.
# Then you will have to change your terminal settings to use the font you just installed.
# Please refer to your terminal's documentation for changing the terminal font.
- name: download nerd fonts for powerlevel10k
  ansible.builtin.get_url:
    url: "{{ item.url }}"
    dest: "~/.local/share/fonts/{{ item.name }}"
  loop:
    - { url: "https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Regular.ttf",       name: "MesloLGS NF Regular.ttf"}
    - { url: "https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold.ttf",          name: "MesloLGS NF Bold.ttf"}
    - { url: "https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Italic.ttf",        name: "MesloLGS NF Italic.ttf"}
    - { url: "https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20Bold%20Italic.ttf", name: "MesloLGS NF Bold Italic.ttf" }
  tags:
    - linux
    - fonts

# - name: Install snaps
#   community.general.snap:
#     name: "{{ item.package }}"
#     classic: "{{ item.classic }}"
#   loop: "{{ snap_packages }}"
#   become: yes

# - name: Setup dns addresses
#   ansible.builtin.shell:
#     "nmcli connection modify {{ item.connection_name }} {{ item.type }} '{{ item.addresses }}'"
#   loop:
#     - { connection_name: "{{ ansible_default_ipv4['interface'] }}", type: ipv4.dns, addresses: "{{ dns_addresses['ipv4'] | join(',') }}" }
#     - { connection_name: "{{ ansible_default_ipv6['interface'] }}", type: ipv6.dns, addresses: "{{ dns_addresses['ipv6'] | join(',') }}" }
#   when: ansible_distribution | lower == 'pop!_os'
