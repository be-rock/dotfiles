# .functions

# follow a file using bat
batf() {
    tail -f "$1" | bat -p --paging=never
}

# echo in colors
red() {
    echo -e "\e[31m${1}\e[0m"
}
yellow() {
    echo -e "\e[33m${1}\e[0m"
}
green() {
    echo -e "\e[32m${1}\e[0m"
}

# check if uri is up
isup() {
    local uri=$1
    if curl -s --head  --request GET "$uri" | grep "200 OK" > /dev/null ; then
        echo "$uri is $(red down)"
    else
    echo "$uri is $(green up)"
   fi
}

# backup a file: bkp [file]
# will create [file].[CurrentDateTime].bak in the directory that the file resides in
bkp () {
    dt=$(date +%Y%m%dT%H%M%S%z)
    echo "copying $1 to $1.$dt.bak"
    cp "$1"{,.$dt.bak}
}


# compute an md5sum and compare it with grep: md5check [file] [key]
md5check() {
    md5sum "$1" | grep "$2";
}

# compute an sha256sum and compare it with grep: sha256sum [file] [key]
shacheck() {
    sha256sum "$1" | grep "$2"
}

# compute a sha256 checksum
sha() {
    if [ SYSTEM_TYPE=="macOS" ]; then
        shasum -a 256 "$1"
    else
        sha256sum "$1"
    fi
}

dttz() {
    # timezone helper
    echo -n 'Los Angeles : ' && TZ=America/Los_Angeles date +%FT%T%z
    echo -n 'Phoenix     : ' && TZ=America/Phoenix date +%FT%T%z
    echo -n 'Chicago     : ' && TZ=America/Chicago date +%FT%T%z
    echo -n 'New York    : ' && TZ=America/New_York date +%FT%T%z
    echo -n 'UTC         : ' && TZ=UTC date +%FT%T%z
    echo -n 'Bangalore   : ' && TZ=Asia/Kolkata date +%FT%T%z
    echo -n 'local       : ' && date +%FT%T%z
}

# Create a new directory and enter it
mkd() {
    mkdir -p "$@"
    cd "$@" || exit
}


# Make a temporary directory and enter it
mkdt() {
    local dir
    if [ $# -eq 0 ]; then
        dir=$(mktemp -d)
    else
        dir=$(mktemp -d -t "${1}.XXXXXXXXXX")
    fi
    cd "$dir" || exit
}


# extract any kind of archive: extract [archive file]
extract() {
    if [ -f $1 ] ; then
      case $1 in
        *.tar.bz2)   tar xjf $1     ;;
        *.tar.gz)    tar xzf $1     ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xf $1      ;;
        *.tbz2)      tar xjf $1     ;;
        *.tgz)       tar xzf $1     ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

# find things case-insensitive: findit stringToSearchFor
findit (){
   if [ -z ${1} ];then
      echo "Please pass an argument that you want to search for"
   else
      find . -iname "*$1*" -print
   fi
}


# Determine size of a file or total size of a directory
fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg -- .[^.]* *
	fi
}


docker_python() {
    #
    # purpose:
    #   quickly start a python repl in a docker container given a version, tag, and one or more python packages
    # usage:
    #   docker_python <python_ersion> <docker_tag> <python packages>
    # example:
    #   docker_python 3.8.1 my_tag requests pytest
    #

    echo "python version        : $1";
    echo "docker image tag name : $2";
    echo "python packages       : ${@:3}";

    echo -e "FROM python:$1-slim
        RUN python -m pip install \
        --upgrade pip \
        ${@:3}" > ./Dockerfile

    echo -e "\nBuilding image from Dockerfile:\n$(cat ./Dockerfile)\n"
    docker build . --tag $2
    rm -f Dockerfile
    docker container run -it --rm $2
}


byte_convert () {
    #
    # purpose:
    #   convert bytes from one unit to another
    # usage:
    #   usage: byte_convert <num> <unit>. Valid units [b|kb|mb|gb|tb|pb|eb
    # example:
    #   byte_convert 123456 gb
    #
    echo -e "def converter(kind: str, num: int):
    l = ['b', 'kb', 'mb', 'gb', 'tb', 'pb', 'eb']
    kind_pstn = l.index(kind)
    for item in l:
        pstn = l.index(item)
        offset = abs(kind_pstn - pstn)
        if pstn < kind_pstn:
            print(int(num * (1024 ** offset)), item)
        elif pstn > kind_pstn:
            print(int(num / (1024 ** offset)), item)
        else:
            print(num, item)

converter(kind='$2', num=int($1))" | python
}


abspath () {
    # retrieve absolute path of file - platform independent
    echo "$(cd $(dirname "$1");pwd)/$(basename "$1")"
}

pyproject_setup_template () {
    #
    # purpose:
    #   create files and directories to quickly setup python project starter template in the current directory
    # usage:
    #   project_setup_template_python
    #
    mkdir -p app tests/{integration,unit} && \
    touch app/{__init__.py,main.py} tests/__init__.py tests/integration/__init__.py tests/unit/__init__.py \
        tests/integration/__init__.py tests/unit/__init__.py tests/conftest.py
}


function print_msg() {
    #
    # purpose:
    #   print a message with a date and log level to stdout
    # usage:
    #   print_msg "custom message here" # <-- default log level is INFO
    #   print_msg "custom message here" ERROR # <-- override default log level to ERROR
    #
    custom_msg=$1
    level="INFO"
    if [ -n "$2" ]; then
        level="$2"
    fi
    full_msg="$(date +%FT%T%z) | $level | ${custom_msg}"
    echo $full_msg
}

function source_env() {
    #
    # purpose:
    #   source a .env (aka "dotenv") file containing key/value pairs
    #   so that each key is reflected as an environment variable
    #
    # usage:
    #   source_env <file>
    # <file> can be a relative or abs path
    #
    export $(grep -v '^#' $1 | xargs)
}
