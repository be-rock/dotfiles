# .functions

# follow a file using bat
batf() {
    tail -f "$1" | bat -p --paging=never
}

# echo in colors
red() { echo -e "\e[31m${1}\e[0m" }
yellow() { echo -e "\e[33m${1}\e[0m" }
green() { echo -e "\e[32m${1}\e[0m" }

# check if uri is up
isup() {
	local uri=$1
	if curl -s --head  --request GET "$uri" | grep "200 OK" > /dev/null ; then
		echo "$uri is $(red down)"
	else
		echo "$uri is $(green up)"
	fi
}

# "sort by size" to display in list the files in the current directory, sorted by their size (descending)
sbs() { 
    du -b --max-depth 1 | sort -nr | perl -pe 's{([0-9]+)}{sprintf "%.1f%s", $1>=2**30? ($1/2**30, "G"): $1>=2**20? ($1/2**20, "M"): $1>=2**10? ($1/2**10, "K"): ($1, "")}e';
}

# backup a file: bkp [file] will create [file].bkp.[CurrentDate] in the directory that the file resides in
bkp() { cp "$1"{,.bkp.$(date +%Y%m%dT%H%M%S%z)}; }

# compute an md5sum and compare it with grep: md5check [file] [key]
md5check() { md5sum "$1" | grep "$2";}

# extract any kind of archive: extract [archive file]
extract() {
    if [ -f $1 ] ; then
      case $1 in
        *.tar.bz2)   tar xjf $1     ;;
        *.tar.gz)    tar xzf $1     ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xf $1      ;;
        *.tbz2)      tar xjf $1     ;;
        *.tgz)       tar xzf $1     ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

# find things case-insensitive: findit stringToSearchFor
findit (){
   if [ -z ${1} ];then
      echo "Please pass an argument that you want to search for"
   else
      find . -iname "*$1*" -print
   fi
}

# end
