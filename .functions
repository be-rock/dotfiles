# .functions

# follow a file using bat
batf() {
    tail -f "$1" | bat -p --paging=never
}

# echo in colors
red() { echo -e "\e[31m${1}\e[0m" }
yellow() { echo -e "\e[33m${1}\e[0m" }
green() { echo -e "\e[32m${1}\e[0m" }

# check if uri is up
isup() {
    local uri=$1
    if curl -s --head  --request GET "$uri" | grep "200 OK" > /dev/null ; then
        echo "$uri is $(red down)"
    else
    echo "$uri is $(green up)"
   fi
}

# backup a file: bkp [file] will create [file].bkp.[CurrentDate] in the directory that the file resides in
bkp() { cp "$1"{,.bkp.$(date +%Y%m%dT%H%M%S%z)}; }


# compute an md5sum and compare it with grep: md5check [file] [key]
md5check() { md5sum "$1" | grep "$2";}


# Create a new directory and enter it
mkd() {
    mkdir -p "$@"
    cd "$@" || exit
}


# Make a temporary directory and enter it
tmpd() {
    local dir
    if [ $# -eq 0 ]; then
        dir=$(mktemp -d)
    else
        dir=$(mktemp -d -t "${1}.XXXXXXXXXX")
    fi
    cd "$dir" || exit
}


# extract any kind of archive: extract [archive file]
extract() {
    if [ -f $1 ] ; then
      case $1 in
        *.tar.bz2)   tar xjf $1     ;;
        *.tar.gz)    tar xzf $1     ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xf $1      ;;
        *.tbz2)      tar xjf $1     ;;
        *.tgz)       tar xzf $1     ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

# find things case-insensitive: findit stringToSearchFor
findit (){
   if [ -z ${1} ];then
      echo "Please pass an argument that you want to search for"
   else
      find . -iname "*$1*" -print
   fi
}


docker_python() {
    #
    # purpose:
    #   quickly start a python repl in a docker container given a version, tag, and one or more python packages
    # usage:
    #   docker_python <python_ersion> <docker_tag> <python packages>
    # example:
    #   docker_python 3.8.1 my_tag requests pytest
    #

    echo "python version        : $1";
    echo "docker image tag name : $2";
    echo "python packages       : ${@:3}";

    echo -e "FROM python:$1-slim
        RUN python -m pip install \
        --upgrade pip \
        ${@:3}" > ./Dockerfile

    echo -e "\nBuilding image from Dockerfile:\n$(cat ./Dockerfile)\n"
    docker build . --tag $2
    rm -f Dockerfile
    docker container run -it --rm $2
}


byte_convert () {
    #
    # purpose:
    #   convert bytes from one unit to another
    # usage:
    #   usage: byte_convert <num> <unit>. Valid units [b|kb|mb|gb|tb|pb|eb
    # example:
    #   byte_convert 123456 gb
    #
    echo -e "def converter(kind: str, num: int):
    l = ['b', 'kb', 'mb', 'gb', 'tb', 'pb', 'eb']
    kind_pstn = l.index(kind)
    for item in l:
        pstn = l.index(item)
        offset = abs(kind_pstn - pstn)
        if pstn < kind_pstn:
            print(int(num * (1024 ** offset)), item)
        elif pstn > kind_pstn:
            print(int(num / (1024 ** offset)), item)
        else:
            print(num, item)

converter(kind='$2', num=int($1))" | python
}

pyproject_setup_template () {
    #
    # purpose:
    #   create files and directories to quickly setup python project starter template in the current directory
    # usage:
    #   project_setup_template_python
    #
    mkdir -p app tests/{integration,unit} && \
    touch app/{__init__.py,main.py} tests/integration/__init__.py tests/unit/__init__.py \
        tests/integration/__init__.py tests/unit/__init__.py tests/conftest.py
}


# end
